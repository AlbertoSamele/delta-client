// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BlockModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CacheFaceDirection: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case up // = 0
  case down // = 1
  case north // = 2
  case south // = 3
  case east // = 4
  case west // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .up
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .up
    case 1: self = .down
    case 2: self = .north
    case 3: self = .south
    case 4: self = .east
    case 5: self = .west
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .up: return 0
    case .down: return 1
    case .north: return 2
    case .south: return 3
    case .east: return 4
    case .west: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CacheFaceDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CacheFaceDirection] = [
    .up,
    .down,
    .north,
    .south,
    .east,
    .west,
  ]
}

#endif  // swift(>=4.2)

struct CacheBlockModelElementFace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uvs: [Float] = []

  var textureIndex: UInt32 = 0

  var hasCullface_p: Bool = false

  var cullFace: CacheFaceDirection {
    get {return _cullFace ?? .up}
    set {_cullFace = newValue}
  }
  /// Returns true if `cullFace` has been explicitly set.
  var hasCullFace: Bool {return self._cullFace != nil}
  /// Clears the value of `cullFace`. Subsequent reads from it will return its default value.
  mutating func clearCullFace() {self._cullFace = nil}

  var tintIndex: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cullFace: CacheFaceDirection? = nil
}

struct CacheBlockModelElement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var modelMatrix: Data = Data()

  var faces: [CacheBlockModelElementFace] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CacheBlockModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fullFaces: [CacheFaceDirection] = []

  var elements: [CacheBlockModelElement] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CacheFaceDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UP"),
    1: .same(proto: "DOWN"),
    2: .same(proto: "NORTH"),
    3: .same(proto: "SOUTH"),
    4: .same(proto: "EAST"),
    5: .same(proto: "WEST"),
  ]
}

extension CacheBlockModelElementFace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CacheBlockModelElementFace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uvs"),
    2: .same(proto: "textureIndex"),
    3: .same(proto: "hasCullface"),
    4: .same(proto: "cullFace"),
    5: .same(proto: "tintIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFloatField(value: &self.uvs) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.textureIndex) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasCullface_p) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._cullFace) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.tintIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uvs.isEmpty {
      try visitor.visitPackedFloatField(value: self.uvs, fieldNumber: 1)
    }
    if self.textureIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.textureIndex, fieldNumber: 2)
    }
    if self.hasCullface_p != false {
      try visitor.visitSingularBoolField(value: self.hasCullface_p, fieldNumber: 3)
    }
    if let v = self._cullFace {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if self.tintIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.tintIndex, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CacheBlockModelElementFace, rhs: CacheBlockModelElementFace) -> Bool {
    if lhs.uvs != rhs.uvs {return false}
    if lhs.textureIndex != rhs.textureIndex {return false}
    if lhs.hasCullface_p != rhs.hasCullface_p {return false}
    if lhs._cullFace != rhs._cullFace {return false}
    if lhs.tintIndex != rhs.tintIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CacheBlockModelElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CacheBlockModelElement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "modelMatrix"),
    2: .same(proto: "faces"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.modelMatrix) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.faces) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.modelMatrix.isEmpty {
      try visitor.visitSingularBytesField(value: self.modelMatrix, fieldNumber: 1)
    }
    if !self.faces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.faces, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CacheBlockModelElement, rhs: CacheBlockModelElement) -> Bool {
    if lhs.modelMatrix != rhs.modelMatrix {return false}
    if lhs.faces != rhs.faces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CacheBlockModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CacheBlockModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fullFaces"),
    2: .same(proto: "elements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.fullFaces) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullFaces.isEmpty {
      try visitor.visitPackedEnumField(value: self.fullFaces, fieldNumber: 1)
    }
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CacheBlockModel, rhs: CacheBlockModel) -> Bool {
    if lhs.fullFaces != rhs.fullFaces {return false}
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
